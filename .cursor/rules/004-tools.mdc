---
alwaysApply: true
---
# Tools Output Organization System

## Overview
this should be understood as if it was javascript and not python

This document summarizes the new output organization system for tools in the `@/tools` directory. The system ensures that all tool outputs are saved in appropriate, organized directories rather than cluttering the root or tools directory.

## Directory Structure

### üìÅ JSON/ - JSON Output Files
**Location**: Root directory `/JSON/`
**Purpose**: All JSON output files from tools
**Examples**:
- Database schema analysis results
- WebSocket data exports
- Configuration exports
- Analysis results
- Audit reports

### üìÅ SUMMARY/ - Summary Reports and Documentation
**Location**: Root directory `/SUMMARY/`
**Purpose**: Markdown summary reports and documentation
**Examples**:
- Analysis reports
- Audit summaries
- Performance summaries
- Cleanup reports

### üìÅ REPORTS/ - Generated Reports and Visualizations
**Location**: Root directory `/REPORTS/`
**Purpose**: Generated reports and analysis outputs
**Examples**:
- HTML reports
- PDF exports
- Chart images
- Analysis visualizations

### üìÅ data/ - Raw Data Exports
**Location**: Root directory `/data/`
**Purpose**: Raw data exports and datasets
**Examples**:
- CSV exports
- Raw database dumps
- Historical data exports
- Configuration backups

### üìÅ docs/ - Documentation
**Location**: Root directory `/docs/`
**Purpose**: Documentation and guides
**Examples**:
- Configuration guides
- Debug summaries
- Process documentation
- Agent analysis reports

### üìÅ SCHEMAS/ - Database Schema Analysis
**Location**: Root directory `/SCHEMAS/`
**Purpose**: Database schema analysis files
**Examples**:
- Agent schema analysis
- Database structure exports
- Phoenix database schemas
- Redis schema analysis

## Implementation

### Cursor Rule
A comprehensive Cursor rule has been created at `.cursor/rules/tools_output_organization.mdc` that:
- Defines the output directory structure
- Provides implementation guidelines
- Shows correct and incorrect patterns
- Includes tool-specific guidelines
- Offers validation checklist

### Directory Creation Script
A script at `tools/create_output_directories.py` ensures all output directories exist:
```bash
python create_output_directories.py
```

## File Naming Conventions

### Timestamps
All output files should include timestamps for uniqueness:
```python
from datetime import datetime
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
filename = f"audit_results_{timestamp}.json"
```

### Examples
```
JSON/
‚îú‚îÄ‚îÄ audit_results_20250727_190020.json
‚îú‚îÄ‚îÄ schema_analysis_OctaviaAgent_BTC_20250727_190020.json
‚îî‚îÄ‚îÄ websocket_data_20250727_190020.json

SUMMARY/
‚îú‚îÄ‚îÄ audit_summary_20250727_190020.md
‚îú‚îÄ‚îÄ analysis_report_20250727_190020.md
‚îî‚îÄ‚îÄ cleanup_report_20250727_190020.md

REPORTS/
‚îú‚îÄ‚îÄ analysis_chart_20250727_190020.png
‚îú‚îÄ‚îÄ performance_report_20250727_190020.html
‚îî‚îÄ‚îÄ audit_visualization_20250727_190020.png
```

## Tool-Specific Guidelines

### Database Tools (`tools/database/`)
- **Schema analysis**: Save to `/SCHEMAS/`
- **Data exports**: Save to `/data/`
- **Configuration exports**: Save to `/JSON/`

### Analysis Tools (`tools/analysis/`)
- **Analysis results**: Save to `/JSON/`
- **Charts and visualizations**: Save to `/REPORTS/`
- **Summary reports**: Save to `/SUMMARY/`

### Testing Tools (`tools/testing/`)
- **Test results**: Save to `/JSON/`
- **Test reports**: Save to `/SUMMARY/`
- **Test data**: Save to `/data/`

### Configuration Tools (`tools/configuration/`)
- **Configuration exports**: Save to `/JSON/`
- **Configuration guides**: Save to `/docs/`

### Cleanup Tools (`tools/cleanup/`)
- **Cleanup reports**: Save to `/SUMMARY/`
- **Cleanup logs**: Save to `/JSON/`

### System Tools (`tools/system/`)
- **System reports**: Save to `/SUMMARY/`
- **System data**: Save to `/JSON/`

### WebSocket Tools (`tools/websocket/`)
- **WebSocket data**: Save to `/JSON/`
- **Connection logs**: Save to `/JSON/`

### Utilities (`tools/utilities/`)
- **Utility outputs**: Save to `/JSON/`
- **Utility reports**: Save to `/SUMMARY/`

## Common Patterns

### JSON Outputs
```python
def save_json_output(data, filename):
    json_dir = Path("../JSON")
    json_dir.mkdir(exist_ok=True)
    
    output_path = json_dir / filename
    with open(output_path, 'w') as f:
        json.dump(data, f, indent=2)
    
    print(f"‚úÖ Saved JSON output to: {output_path}")
```

### Documentation Outputs
```python
def save_documentation(content, filename):
    summary_dir = Path("../SUMMARY")
    summary_dir.mkdir(exist_ok=True)
    
    output_path = summary_dir / filename
    with open(output_path, 'w') as f:
        f.write(content)
    
    print(f"‚úÖ Saved documentation to: {output_path}")
```

### Schema Analysis Outputs
```python
def save_schema_analysis(data, filename):
    schemas_dir = Path("../SCHEMAS")
    schemas_dir.mkdir(exist_ok=True)
    
    output_path = schemas_dir / filename
    with open(output_path, 'w') as f:
        json.dump(data, f, indent=2)
    
    print(f"‚úÖ Saved schema analysis to: {output_path}")
```

## Anti-Patterns to Avoid

### ‚ùå DON'T: Save outputs in tools directory
```python
# ‚ùå WRONG: Don't save outputs in tools/
with open("results.json", "w") as f:
    json.dump(data, f)
```

### ‚ùå DON'T: Save outputs in root directory
```python
# ‚ùå WRONG: Don't save outputs in root/
with open("../output.json", "w") as f:
    json.dump(data, f)
```

### ‚ùå DON'T: Use generic filenames
```python
# ‚ùå WRONG: Don't use generic names
filename = "data.json"  # Too generic
```

### ‚ùå DON'T: Skip directory creation
```python
# ‚ùå WRONG: Don't assume directory exists
with open("../JSON/data.json", "w") as f:  # May fail if JSON/ doesn't exist
    json.dump(data, f)
```

## Validation Checklist

Before committing any tool changes, verify:

- [ ] Tool outputs are saved to appropriate directories
- [ ] Directories are created if they don't exist
- [ ] Filenames include timestamps for uniqueness
- [ ] Success messages indicate where files were saved
- [ ] No outputs are saved in tools/ directory
- [ ] No outputs are saved in root directory
- [ ] File types match their directory purpose
- [ ] Existing files are handled appropriately

## Integration with Existing Tools

### main-schema.py
The `main-schema.py` tool correctly saves to `/SCHEMAS/`:
```python
# ‚úÖ CORRECT: Already following the pattern
output_path = schemas_dir / output_filename
with open(output_path, 'w', encoding='utf-8') as f:
    json.dump(schema_data, f, indent=2, default=serialize_datetime, ensure_ascii=False)
```

### comprehensive_audit.py
The comprehensive audit tool now saves to `/JSON/`:
```python
# ‚úÖ CORRECT: Updated to follow the pattern
json_dir = Path("../JSON")
json_dir.mkdir(exist_ok=True)
output_path = json_dir / filename
with open(output_path, 'w') as f:
    json.dump(data, f, indent=2)
print(f"‚úÖ Exported audit results to {output_path}")
```

## Benefits

1. **Clean Organization**: Outputs are organized by type and purpose
2. **Easy Discovery**: Files are easy to find in their appropriate directories
3. **No Clutter**: Root and tools directories remain clean
4. **Consistent Naming**: Timestamps ensure unique filenames
5. **Clear Purpose**: Each directory has a specific purpose
6. **Scalable**: System can handle many outputs without confusion

## Future Enhancements

Potential improvements:
- **Automated Cleanup**: Scripts to clean old output files
- **Output Indexing**: Create index files for easy discovery
- **Compression**: Automatically compress old outputs
- **Retention Policies**: Define how long to keep outputs
- **Search Integration**: Make outputs searchable
- **Web Interface**: Browser-based output viewer

## Conclusion

This output organization system ensures that all tools save their outputs in appropriate, organized directories. The system is designed to be:
- **Consistent**: All tools follow the same patterns
- **Scalable**: Can handle many outputs without confusion
- **Maintainable**: Easy to understand and modify
- **User-Friendly**: Clear success messages and organization

By following this system, the project maintains a clean, organized structure that makes it easy to find and manage tool outputs.